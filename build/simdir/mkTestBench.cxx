/*
 * Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87a)
 * 
 * On Sun Apr 20 03:23:25 KST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkTestBench.h"


/* String declarations */
static std::string const __str_literal_2("CPU: %x", 7u);
static std::string const __str_literal_1("[TestBench] cycle %d", 20u);


/* Constructor */
MOD_mkTestBench::MOD_mkTestBench(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    INST_proc(simHdl, "proc", this),
    INST_tState(simHdl, "tState", this, 2u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 6u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTestBench::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "proc", SYM_MODULE, &INST_proc);
  init_symbol(&symbols[2u], "RL_endTest", SYM_RULE);
  init_symbol(&symbols[3u], "RL_initTest", SYM_RULE);
  init_symbol(&symbols[4u], "RL_runTest", SYM_RULE);
  init_symbol(&symbols[5u], "tState", SYM_MODULE, &INST_tState);
}


/* Rule actions */

void MOD_mkTestBench::RL_initTest()
{
  INST_proc.METH_hostToCpu(12288u);
  INST_tState.METH_write((tUInt8)1u);
}

void MOD_mkTestBench::RL_runTest()
{
  tUInt32 DEF_x__h367;
  tUInt8 DEF_proc_cpuToHost_BITS_17_TO_16_EQ_0___d9;
  tUInt8 DEF_proc_cpuToHost_BITS_17_TO_16_EQ_2___d7;
  tUInt8 DEF_proc_cpuToHost_BITS_17_TO_16___d6;
  tUInt32 DEF_x1_avValue_data__h235;
  tUInt32 DEF__read__h86;
  tUInt32 DEF_proc_cpuToHost___d5;
  tUInt32 DEF_AVMeth_proc_cpuToHost;
  DEF__read__h86 = INST_cycle.METH_read();
  DEF_x__h367 = DEF__read__h86 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF__read__h86);
  DEF_AVMeth_proc_cpuToHost = INST_proc.METH_cpuToHost();
  DEF_proc_cpuToHost___d5 = DEF_AVMeth_proc_cpuToHost;
  DEF_x1_avValue_data__h235 = (tUInt32)(65535u & DEF_proc_cpuToHost___d5);
  DEF_proc_cpuToHost_BITS_17_TO_16___d6 = (tUInt8)(DEF_proc_cpuToHost___d5 >> 16u);
  DEF_proc_cpuToHost_BITS_17_TO_16_EQ_2___d7 = DEF_proc_cpuToHost_BITS_17_TO_16___d6 == (tUInt8)2u;
  DEF_proc_cpuToHost_BITS_17_TO_16_EQ_0___d9 = DEF_proc_cpuToHost_BITS_17_TO_16___d6 == (tUInt8)0u;
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_proc_cpuToHost_BITS_17_TO_16_EQ_2___d7)
      dollar_display(sim_hdl, this, "s,16", &__str_literal_2, DEF_x1_avValue_data__h235);
  if (DEF_proc_cpuToHost_BITS_17_TO_16_EQ_0___d9)
    INST_tState.METH_write((tUInt8)2u);
  INST_cycle.METH_write(DEF_x__h367);
}

void MOD_mkTestBench::RL_endTest()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 1u);
}


/* Methods */


/* Reset routines */

void MOD_mkTestBench::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_tState.reset_RST(ARG_rst_in);
  INST_proc.reset_RST_N(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTestBench::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTestBench::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
  INST_proc.dump_state(indent + 2u);
  INST_tState.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTestBench::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 3u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_tState.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_proc.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTestBench::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestBench &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTestBench::vcd_defs(tVCDDumpType dt, MOD_mkTestBench &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTestBench::vcd_prims(tVCDDumpType dt, MOD_mkTestBench &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_tState.dump_VCD(dt, backing.INST_tState);
}

void MOD_mkTestBench::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestBench &backing)
{
  INST_proc.dump_VCD(dt, levels, backing.INST_proc);
}
