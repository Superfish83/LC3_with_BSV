/*
 * Generated by Bluespec Compiler, version 2025.01.1 (build 65e3a87a)
 * 
 * On Sun Apr 20 14:48:10 KST 2025
 * 
 */
#include "bluesim_primitives.h"
#include "mkLC3_Proc.h"


/* Constructor */
MOD_mkLC3_Proc::MOD_mkLC3_Proc(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_pc(simHdl, "pc", this, 16u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 3u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkLC3_Proc::init_symbols_0()
{
  init_symbol(&symbols[0u], "pc", SYM_MODULE, &INST_pc);
  init_symbol(&symbols[1u], "RL_doProc", SYM_RULE);
  init_symbol(&symbols[2u], "running", SYM_MODULE, &INST_running);
}


/* Rule actions */

void MOD_mkLC3_Proc::RL_doProc()
{
  tUInt32 DEF_x__h89;
  DEF__read__h71 = INST_pc.METH_read();
  DEF_x__h89 = 65535u & (DEF__read__h71 + 1u);
  INST_pc.METH_write(DEF_x__h89);
}


/* Methods */

void MOD_mkLC3_Proc::METH_hostToCpu(tUInt32 ARG_hostToCpu_startAddr)
{
  INST_pc.METH_write(ARG_hostToCpu_startAddr);
  INST_running.METH_write((tUInt8)1u);
}

tUInt8 MOD_mkLC3_Proc::METH_RDY_hostToCpu()
{
  tUInt8 DEF_CAN_FIRE_hostToCpu;
  tUInt8 PORT_RDY_hostToCpu;
  DEF_CAN_FIRE_hostToCpu = (tUInt8)1u;
  PORT_RDY_hostToCpu = DEF_CAN_FIRE_hostToCpu;
  return PORT_RDY_hostToCpu;
}

tUInt32 MOD_mkLC3_Proc::METH_cpuToHost()
{
  tUInt8 DEF_pc_ULT_0x3012___d4;
  tUInt32 DEF__0_CONCAT_DONTCARE___d6;
  tUInt32 DEF__2_CONCAT_pc___d5;
  tUInt32 PORT_cpuToHost;
  DEF__read__h71 = INST_pc.METH_read();
  DEF__2_CONCAT_pc___d5 = 262143u & ((((tUInt32)((tUInt8)2u)) << 16u) | DEF__read__h71);
  DEF__0_CONCAT_DONTCARE___d6 = 43690u;
  DEF_pc_ULT_0x3012___d4 = DEF__read__h71 < 12306u;
  PORT_cpuToHost = DEF_pc_ULT_0x3012___d4 ? DEF__2_CONCAT_pc___d5 : DEF__0_CONCAT_DONTCARE___d6;
  return PORT_cpuToHost;
}

tUInt8 MOD_mkLC3_Proc::METH_RDY_cpuToHost()
{
  tUInt8 DEF_CAN_FIRE_cpuToHost;
  tUInt8 PORT_RDY_cpuToHost;
  DEF_CAN_FIRE_cpuToHost = (tUInt8)1u;
  PORT_RDY_cpuToHost = DEF_CAN_FIRE_cpuToHost;
  return PORT_RDY_cpuToHost;
}


/* Reset routines */

void MOD_mkLC3_Proc::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_running.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkLC3_Proc::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkLC3_Proc::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_pc.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkLC3_Proc::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h71", 16u);
  num = INST_pc.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkLC3_Proc::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkLC3_Proc &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkLC3_Proc::vcd_defs(tVCDDumpType dt, MOD_mkLC3_Proc &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF__read__h71) != DEF__read__h71)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h71, 16u);
	backing.DEF__read__h71 = DEF__read__h71;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF__read__h71, 16u);
      backing.DEF__read__h71 = DEF__read__h71;
    }
}

void MOD_mkLC3_Proc::vcd_prims(tVCDDumpType dt, MOD_mkLC3_Proc &backing)
{
  INST_pc.dump_VCD(dt, backing.INST_pc);
  INST_running.dump_VCD(dt, backing.INST_running);
}
